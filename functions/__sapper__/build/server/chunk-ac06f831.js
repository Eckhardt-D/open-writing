'use strict';

var __chunk_1 = require('./chunk-791a7619.js');
var __chunk_2 = require('./chunk-81355e30.js');

const CONTEXT_KEY = {};

const preload = () => ({});

/* src/components/Nav.svelte generated by Svelte v3.4.2 */

const css = {
	code: ".navbar-toggler.svelte-245pdj{border:none}.navbar.svelte-245pdj{position:fixed;top:0;left:0;right:0;z-index:10}",
	map: "{\"version\":3,\"file\":\"Nav.svelte\",\"sources\":[\"Nav.svelte\"],\"sourcesContent\":[\"<script>\\n  export let segment;\\n  import { user } from \\\"../stores.js\\\";\\n\\n  const toggleNavbar = e => {\\n    const mobileNav = document.querySelector(\\\".navbar-collapse\\\");\\n    if (mobileNav.classList.contains(\\\"collapse\\\")) {\\n      mobileNav.classList.remove(\\\"collapse\\\");\\n      mobileNav.classList.add(\\\"expand\\\");\\n    } else {\\n      mobileNav.classList.remove(\\\"expand\\\");\\n      mobileNav.classList.add(\\\"collapse\\\");\\n    }\\n  };\\n\\n  const logout = () => {\\n    firebase.auth().signOut();\\n    return (location.href = \\\"/\\\");\\n  };\\n</script>\\n\\n<style>\\n  .navbar-toggler {\\n    border: none;\\n  }\\n\\n  .navbar {\\n    position: fixed;\\n    top: 0;\\n    left: 0;\\n    right: 0;\\n    z-index: 10;\\n  }\\n</style>\\n\\n<nav class=\\\"navbar navbar-expand-lg navbar-light bg-light\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\".\\\">\\n    OPEN\\n    <span class=\\\"text-warning\\\">WRITING</span>\\n  </a>\\n  <button on:click={toggleNavbar} class=\\\"navbar-toggler\\\" type=\\\"button\\\">\\n    <span class=\\\"navbar-toggler-icon\\\" />\\n  </button>\\n\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarColor02\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item active\\\">\\n        <a class=\\\"nav-link\\\" href=\\\".\\\">\\n          Home\\n          <span class=\\\"sr-only\\\">(current)</span>\\n        </a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\".\\\">Features</a>\\n      </li>\\n      <li class=\\\"nav-item\\\">\\n        <a class=\\\"nav-link\\\" href=\\\".\\\">Pricing</a>\\n      </li>\\n      {#if $user}\\n        <li class=\\\"nav-item\\\">\\n          <button class=\\\"nav-link\\\" on:click={logout}>logout</button>\\n        </li>\\n      {/if}\\n    </ul>\\n  </div>\\n</nav>\\n\"],\"names\":[],\"mappings\":\"AAsBE,eAAe,cAAC,CAAC,AACf,MAAM,CAAE,IAAI,AACd,CAAC,AAED,OAAO,cAAC,CAAC,AACP,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,CAAC,CACR,OAAO,CAAE,EAAE,AACb,CAAC\"}"
};

const Nav = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $user = __chunk_1.get_store_value(__chunk_2.user);

	let { segment } = $$props;

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	$$result.css.add(css);

	return `<nav class="navbar navbar-expand-lg navbar-light bg-light svelte-245pdj">
	  <a class="navbar-brand svelte-245pdj" href=".">
	    OPEN
	    <span class="text-warning">WRITING</span>
	  </a>
	  <button class="navbar-toggler svelte-245pdj" type="button">
	    <span class="navbar-toggler-icon svelte-245pdj"></span>
	  </button>

	  <div class="collapse navbar-collapse svelte-245pdj" id="navbarColor02">
	    <ul class="navbar-nav mr-auto svelte-245pdj">
	      <li class="nav-item active">
	        <a class="nav-link" href=".">
	          Home
	          <span class="sr-only">(current)</span>
	        </a>
	      </li>
	      <li class="nav-item">
	        <a class="nav-link" href=".">Features</a>
	      </li>
	      <li class="nav-item">
	        <a class="nav-link" href=".">Pricing</a>
	      </li>
	      ${ $user ? `<li class="nav-item">
	          <button class="nav-link">logout</button>
	        </li>` : `` }
	    </ul>
	  </div>
	</nav>`;
});

/* src/components/Footer.svelte generated by Svelte v3.4.2 */

const Footer = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	return `<section class="bg-primary text-white py-2">
	  <p class="mb-0 text-center">© Kaizen Media</p>
	</section>`;
});

/* src/routes/_layout.svelte generated by Svelte v3.4.2 */

const css$1 = {
	code: ".content.svelte-lfxcxi{padding-top:53px;min-height:100vh}",
	map: "{\"version\":3,\"file\":\"_layout.svelte\",\"sources\":[\"_layout.svelte\"],\"sourcesContent\":[\"<script>\\n  import Nav from \\\"../components/Nav.svelte\\\";\\n  import Footer from \\\"../components/Footer.svelte\\\";\\n\\n  export let segment;\\n</script>\\n\\n<style>\\n  .content {\\n    padding-top: 53px;\\n    min-height: 100vh;\\n  }\\n</style>\\n\\n<svelte:head>\\n  <title>Open Writing - Words Collaboration</title>\\n</svelte:head>\\n\\n<Nav {segment} />\\n\\n<main class=\\\"content\\\">\\n  <slot />\\n</main>\\n\\n<Footer />\\n\"],\"names\":[],\"mappings\":\"AAQE,QAAQ,cAAC,CAAC,AACR,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,KAAK,AACnB,CAAC\"}"
};

const Layout = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

  let { segment } = $$props;

	if ($$props.segment === void 0 && $$bindings.segment && segment !== void 0) $$bindings.segment(segment);

	$$result.css.add(css$1);

	return `${($$result.head += `<title>Open Writing - Words Collaboration</title>`, "")}

	${__chunk_1.validate_component(Nav, 'Nav').$$render($$result, { segment: segment }, {}, {})}

	<main class="content svelte-lfxcxi">
	  ${$$slots.default ? $$slots.default() : ``}
	</main>

	${__chunk_1.validate_component(Footer, 'Footer').$$render($$result, {}, {}, {})}`;
});

/* src/routes/_error.svelte generated by Svelte v3.4.2 */

const css$2 = {
	code: "h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}",
	map: "{\"version\":3,\"file\":\"_error.svelte\",\"sources\":[\"_error.svelte\"],\"sourcesContent\":[\"<script>\\n\\texport let status;\\n\\texport let error;\\n\\n\\tconst dev = undefined === 'development';\\n</script>\\n\\n<style>\\n\\th1, p {\\n\\t\\tmargin: 0 auto;\\n\\t}\\n\\n\\th1 {\\n\\t\\tfont-size: 2.8em;\\n\\t\\tfont-weight: 700;\\n\\t\\tmargin: 0 0 0.5em 0;\\n\\t}\\n\\n\\tp {\\n\\t\\tmargin: 1em auto;\\n\\t}\\n\\n\\t@media (min-width: 480px) {\\n\\t\\th1 {\\n\\t\\t\\tfont-size: 4em;\\n\\t\\t}\\n\\t}\\n</style>\\n\\n<svelte:head>\\n\\t<title>{status}</title>\\n</svelte:head>\\n\\n<h1>{status}</h1>\\n\\n<p>{error.message}</p>\\n\\n{#if dev && error.stack}\\n\\t<pre>{error.stack}</pre>\\n{/if}\\n\"],\"names\":[],\"mappings\":\"AAQC,gBAAE,CAAE,CAAC,cAAC,CAAC,AACN,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,AACpB,CAAC,AAED,CAAC,cAAC,CAAC,AACF,MAAM,CAAE,GAAG,CAAC,IAAI,AACjB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,EAAE,cAAC,CAAC,AACH,SAAS,CAAE,GAAG,AACf,CAAC,AACF,CAAC\"}"
};

const Error$1 = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let { status, error } = $$props;

	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);

	$$result.css.add(css$2);

	return `${($$result.head += `<title>${__chunk_1.escape(status)}</title>`, "")}

	<h1 class="svelte-8od9u6">${__chunk_1.escape(status)}</h1>

	<p class="svelte-8od9u6">${__chunk_1.escape(error.message)}</p>

	${ `` }`;
});

/* src/node_modules/@sapper/internal/App.svelte generated by Svelte v3.4.2 */

const App = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	

	let { stores, error, status, segments, level0, level1 = null } = $$props;

	__chunk_1.setContext(CONTEXT_KEY, stores);

	if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0) $$bindings.stores(stores);
	if ($$props.error === void 0 && $$bindings.error && error !== void 0) $$bindings.error(error);
	if ($$props.status === void 0 && $$bindings.status && status !== void 0) $$bindings.status(status);
	if ($$props.segments === void 0 && $$bindings.segments && segments !== void 0) $$bindings.segments(segments);
	if ($$props.level0 === void 0 && $$bindings.level0 && level0 !== void 0) $$bindings.level0(level0);
	if ($$props.level1 === void 0 && $$bindings.level1 && level1 !== void 0) $$bindings.level1(level1);

	return `


	${__chunk_1.validate_component(Layout, 'Layout').$$render($$result, Object.assign({ segment: segments[0] }, level0.props), {}, {
		default: () => `
		${ error ? `${__chunk_1.validate_component(Error$1, 'Error').$$render($$result, { error: error, status: status }, {}, {})}` : `${__chunk_1.validate_component(((level1.component) || __chunk_1.missing_component), 'svelte:component').$$render($$result, Object.assign(level1.props), {}, {})}` }
	`
	})}`;
});

// This file is generated by Sapper — do not edit it!

const ignore = [];

const components = [
	{
		js: () => Promise.resolve(require('./index-fea9dd86.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./about-8c9a884b.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:about.svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-2a627056.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:auth/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-0704bfa2.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:auth/login/index.svelte__"
	},
	{
		js: () => Promise.resolve(require('./index-d92a0aec.js')),
		css: "__SAPPER_CSS_PLACEHOLDER:feed/index.svelte__"
	}
];

const routes = [
	{
		// index.svelte
		pattern: /^\/$/,
		parts: [
			{ i: 0 }
		]
	},

	{
		// about.svelte
		pattern: /^\/about\/?$/,
		parts: [
			{ i: 1 }
		]
	},

	{
		// auth/index.svelte
		pattern: /^\/auth\/?$/,
		parts: [
			{ i: 2 }
		]
	},

	{
		// auth/login/index.svelte
		pattern: /^\/auth\/login\/?$/,
		parts: [
			null,
			{ i: 3 }
		]
	},

	{
		// feed/index.svelte
		pattern: /^\/feed\/?$/,
		parts: [
			{ i: 4 }
		]
	}
];

function goto(href, opts = { replaceState: false }) {
	const target = select_target(new URL(href, document.baseURI));

	if (target) {
		_history[opts.replaceState ? 'replaceState' : 'pushState']({ id: cid }, '', href);
		return navigate(target, null).then(() => {});
	}

	location.href = href;
	return new Promise(f => {}); // never resolves
}

const initial_data = typeof __SAPPER__ !== 'undefined' && __SAPPER__;

let ready = false;
let root_component;
let current_token;
let root_preloaded;
let current_branch = [];
let current_query = '{}';

const stores = {
	page: __chunk_2.writable({}),
	preloading: __chunk_2.writable(null),
	session: __chunk_2.writable(initial_data && initial_data.session)
};

let $session;
let session_dirty;

stores.session.subscribe(async value => {
	$session = value;

	if (!ready) return;
	session_dirty = true;

	const target = select_target(new URL(location.href));

	const token = current_token = {};
	const { redirect, props, branch } = await hydrate_target(target);
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
});

let prefetching


 = null;

let target;

let uid = 1;

let cid;

const _history = typeof history !== 'undefined' ? history : {
	pushState: (state, title, href) => {},
	replaceState: (state, title, href) => {},
	scrollRestoration: ''
};

const scroll_history = {};

function extract_query(search) {
	const query = Object.create(null);
	if (search.length > 0) {
		search.slice(1).split('&').forEach(searchParam => {
			let [, key, value = ''] = /([^=]*)(?:=(.*))?/.exec(decodeURIComponent(searchParam.replace(/\+/g, ' ')));
			if (typeof query[key] === 'string') query[key] = [query[key]];
			if (typeof query[key] === 'object') (query[key] ).push(value);
			else query[key] = value;
		});
	}
	return query;
}

function select_target(url) {
	if (url.origin !== location.origin) return null;
	if (!url.pathname.startsWith(initial_data.baseUrl)) return null;

	let path = url.pathname.slice(initial_data.baseUrl.length);

	if (path === '') {
		path = '/';
	}

	// avoid accidental clashes between server routes and page routes
	if (ignore.some(pattern => pattern.test(path))) return;

	for (let i = 0; i < routes.length; i += 1) {
		const route = routes[i];

		const match = route.pattern.exec(path);

		if (match) {
			const query = extract_query(url.search);
			const part = route.parts[route.parts.length - 1];
			const params = part.params ? part.params(match) : {};

			const page = { path, query, params };

			return { href: url.href, route, match, page };
		}
	}
}

function scroll_state() {
	return {
		x: pageXOffset,
		y: pageYOffset
	};
}

async function navigate(target, id, noscroll, hash) {
	if (id) {
		// popstate or initial navigation
		cid = id;
	} else {
		const current_scroll = scroll_state();

		// clicked on a link. preserve scroll state
		scroll_history[cid] = current_scroll;

		id = cid = ++uid;
		scroll_history[cid] = noscroll ? current_scroll : { x: 0, y: 0 };
	}

	cid = id;

	if (root_component) stores.preloading.set(true);

	const loaded = prefetching && prefetching.href === target.href ?
		prefetching.promise :
		hydrate_target(target);

	prefetching = null;

	const token = current_token = {};
	const { redirect, props, branch } = await loaded;
	if (token !== current_token) return; // a secondary navigation happened while we were loading

	await render(redirect, branch, props, target.page);
	if (document.activeElement) document.activeElement.blur();

	if (!noscroll) {
		let scroll = scroll_history[id];

		if (hash) {
			// scroll is an element id (from a hash), we need to compute y.
			const deep_linked = document.getElementById(hash.slice(1));

			if (deep_linked) {
				scroll = {
					x: 0,
					y: deep_linked.getBoundingClientRect().top
				};
			}
		}

		scroll_history[cid] = scroll;
		if (scroll) scrollTo(scroll.x, scroll.y);
	}
}

async function render(redirect, branch, props, page) {
	if (redirect) return goto(redirect.location, { replaceState: true });

	stores.page.set(page);
	stores.preloading.set(false);

	if (root_component) {
		root_component.$set(props);
	} else {
		props.stores = {
			page: { subscribe: stores.page.subscribe },
			preloading: { subscribe: stores.preloading.subscribe },
			session: stores.session
		};
		props.level0 = {
			props: await root_preloaded
		};

		// first load — remove SSR'd <head> contents
		const start = document.querySelector('#sapper-head-start');
		const end = document.querySelector('#sapper-head-end');

		if (start && end) {
			while (start.nextSibling !== end) detach(start.nextSibling);
			detach(start);
			detach(end);
		}

		root_component = new App({
			target,
			props,
			hydrate: true
		});
	}

	current_branch = branch;
	current_query = JSON.stringify(page.query);
	ready = true;
	session_dirty = false;
}

function part_changed(i, segment, match, stringified_query) {
	// TODO only check query string changes for preload functions
	// that do in fact depend on it (using static analysis or
	// runtime instrumentation)
	if (stringified_query !== current_query) return true;

	const previous = current_branch[i];

	if (!previous) return false;
	if (segment !== previous.segment) return true;
	if (previous.match) {
		if (JSON.stringify(previous.match.slice(1, i + 2)) !== JSON.stringify(match.slice(1, i + 2))) {
			return true;
		}
	}
}

async function hydrate_target(target)



 {
	const { route, page } = target;
	const segments = page.path.split('/').filter(Boolean);

	let redirect = null;

	const props = { error: null, status: 200, segments: [segments[0]] };

	const preload_context = {
		fetch: (url, opts) => fetch(url, opts),
		redirect: (statusCode, location) => {
			if (redirect && (redirect.statusCode !== statusCode || redirect.location !== location)) {
				throw new Error(`Conflicting redirects`);
			}
			redirect = { statusCode, location };
		},
		error: (status, error) => {
			props.error = typeof error === 'string' ? new Error(error) : error;
			props.status = status;
		}
	};

	if (!root_preloaded) {
		root_preloaded = initial_data.preloaded[0] || preload.call(preload_context, {
			path: page.path,
			query: page.query,
			params: {}
		}, $session);
	}

	let branch;
	let l = 1;

	try {
		const stringified_query = JSON.stringify(page.query);
		const match = route.pattern.exec(page.path);

		let segment_dirty = false;

		branch = await Promise.all(route.parts.map(async (part, i) => {
			const segment = segments[i];

			if (part_changed(i, segment, match, stringified_query)) segment_dirty = true;

			props.segments[l] = segments[i + 1]; // TODO make this less confusing
			if (!part) return { segment };

			const j = l++;

			if (!session_dirty && !segment_dirty && current_branch[i] && current_branch[i].part === part.i) {
				return current_branch[i];
			}

			segment_dirty = false;

			const { default: component, preload } = await load_component(components[part.i]);

			let preloaded;
			if (ready || !initial_data.preloaded[i + 1]) {
				preloaded = preload
					? await preload.call(preload_context, {
						path: page.path,
						query: page.query,
						params: part.params ? part.params(target.match) : {}
					}, $session)
					: {};
			} else {
				preloaded = initial_data.preloaded[i + 1];
			}

			return (props[`level${j}`] = { component, props: preloaded, segment, match, part: part.i });
		}));
	} catch (error) {
		props.error = error;
		props.status = 500;
		branch = [];
	}

	return { redirect, props, branch };
}

function load_css(chunk) {
	const href = `client/${chunk}`;
	if (document.querySelector(`link[href="${href}"]`)) return;

	return new Promise((fulfil, reject) => {
		const link = document.createElement('link');
		link.rel = 'stylesheet';
		link.href = href;

		link.onload = () => fulfil();
		link.onerror = reject;

		document.head.appendChild(link);
	});
}

function load_component(component)


 {
	// TODO this is temporary — once placeholders are
	// always rewritten, scratch the ternary
	const promises = (typeof component.css === 'string' ? [] : component.css.map(load_css));
	promises.unshift(component.js());
	return Promise.all(promises).then(values => values[0]);
}

function detach(node) {
	node.parentNode.removeChild(node);
}

/* src/components/AuthForm.svelte generated by Svelte v3.4.2 */

const AuthForm = __chunk_1.create_ssr_component(($$result, $$props, $$bindings, $$slots) => {
	let $user = __chunk_1.get_store_value(__chunk_2.user);

	let { loginMode } = $$props;

  let email = "";
  let password = "";
  let password2 = "";
  let showError = false;
  let errorMessage = "";
  let showSuccess = false;
  let successMessage = "";

	if ($$props.loginMode === void 0 && $$bindings.loginMode && loginMode !== void 0) $$bindings.loginMode(loginMode);

	return `<div class="card border-light mx-auto" style="max-width: 25rem;">
	  <div class="card-header">
	    <h5 class="mb-0">
	       ${__chunk_1.escape(loginMode ? 'Login to your account' : 'Create an account')}
	    </h5>
	  </div>
	  <div class="card-body">
	    <form>
	      <div class="form-group">
	        <label for="email">E-mail address</label>
	        <input id="email" type="email" class="form-control" required ${(v => v ? ("value" + (v === true ? "" : "=" + JSON.stringify(v))) : "")(email)}>
	      </div>
	      <div class="form-group">
	        <label for="password">Password</label>
	        <input id="password" type="password" class="form-control" required ${(v => v ? ("value" + (v === true ? "" : "=" + JSON.stringify(v))) : "")(password)}>
	      </div>
	      ${ !loginMode ? `<div class="form-group">
	          <label for="password2">Re-enter your password</label>
	          <input id="password2" type="password" class="form-control" required ${(v => v ? ("value" + (v === true ? "" : "=" + JSON.stringify(v))) : "")(password2)}>
	        </div>` : `` }
	      <div class="form-group">
	        <button type="button" class="btn btn-primary">
	           ${__chunk_1.escape(loginMode ? 'Login' : 'Sign Up')}
	        </button>
	      </div>
	      ${ showError ? `<div class="alert alert-dismissible alert-danger">
	          <button type="button" class="close">
	            ×
	          </button>
	          <strong>Error!</strong>
	           ${__chunk_1.escape(errorMessage)}
	        </div>` : `` }
	      ${ showSuccess ? `<div class="alert alert-dismissible alert-success">
	          <button type="button" class="close">
	            ×
	          </button>
	          <strong>Success!</strong>
	           ${__chunk_1.escape(successMessage)}
	        </div>` : `` }
	      <button class="btn btn-secondary w-100">GitHub</button>
	      <button class="btn btn-secondary w-100 mt-1">Google</button>
	      <small class="text-muted">
	         ${__chunk_1.escape(loginMode ? "Don't have an account?" : 'Already have an account?')}
	        <span class="btn btn-link pl-0">
	           ${__chunk_1.escape(loginMode ? 'Sign up' : 'Login')}
	        </span>
	      </small>
	    </form>
	  </div>
	</div>`;
});

exports.App = App;
exports.AuthForm = AuthForm;
exports.error = Error$1;
exports.root = Layout;
//# sourceMappingURL=chunk-ac06f831.js.map
